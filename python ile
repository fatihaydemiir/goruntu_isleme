import cv2
import numpy as np


resim2=cv2.imread("indir_gri.jpg")
resim=cv2.imread("indir.jpg",0)  #burada 0 siyah beyaz yapıyor resmive okuduk resmi



cv2.imwrite("indir_gri.jpg",resim)  # siyah beyaz resmi kaydettik

print(type(resim))

cv2.imshow("ders_1 resmi",resim) # resmin ekranda gösterilebilmesi için
cv2.imshow("ders_1_resmi",resim2)

cv2.waitKey(0)
cv2.destroyAllWindows()# ekrarnın kapatılabilmesi için



import cv2
import numpy as np


resim=cv2.imread("indir.jpg",0)  #burada 0 siyah beyaz yapıyor resmi  ve okuduk resmi
print(resim)
print(resim.size) # resmin kaç piksel oldugunu görüyorum
print(resim.dtype) # resim neyden oluşuyor units8
cv2.imwrite("indir_gri.jpg",resim)  # siyah beyaz resmi kaydettik

print(type(resim))   #resimtipini gördük
print(resim.item(100,100),0) # siyah bu noktadaki pikselin içerdidi rengin kodunu veriyor
print(resim.item(100,100),1) # red
print(resim.item(100,100),2) #blue

print(resim.shape) # resimin genişlik,yükseklik,kaç resnkten oluştugunu gösteriyor
cv2.imshow("ders_1 resmi",resim) # resmin ekranda gösterilebilmesi için

cv2.waitKey(0)
cv2.destroyAllWindows()# ekrarnın kapatılab

#0->siyah
#255->beyaz





resimin bir bölgesini almak
import cv2
import numpy as np

resim=cv2.imread("resim.jpg")
bolge=resim[100:300,200:400]
#resim[50,50]=[255,255,255] #bu bikseli beyaz yapıyor.
""""

for i in range(200):
    resim[50,i]=[255,255,255]  #resimin belli bir matrisini beyaz yaptı
"""
"""
#resimin bir bölgesini almak
bolge=resim[100:300,200:400]
cv2.imshow("bolgeli hali:",bolge)
cv2.imshow("resimin gösterilimesi",resim)
"""
"""
#resimin bir bölümünü baska bir bölümle degistirme
resim[0:200,0:200]=bolge
resim[0:200,200:400]=bolge
"""

#bellibir bölümü kırmızı yaptık
for i in  resim:
    resim[60,i]=[100,4,200]


cv2.imshow("bolgeli hali:",bolge)
cv2.imshow("resimin gösterilimesi",resim)





print(resim[50,50]) #bu pikseldeki resmin degeri
print("resimin boyutu: "+str(resim.size))
print("resimin ozelligi: "+str(resim.shape))
print("resimin bit degeri: "+str(resim.dtype))
cv2.waitKey(0)
cv2.destroyAllWindows()










rESMİ AYIRMA BİRLEŞTİRME MERGE
import cv2
import numpy as np

resim=cv2.imread("resim.jpg")

print(cv2.split(resim)) #resimin piksellerini 3 parçaya böldü blue,green,red

b,g,r =cv2.split(resim)

yeni_resim=cv2.merge((b,g,r))  # yeni renklerine ayrılmış resim
"""
resim[:,:,0]=255 #bütün resmi mavi tonla yaptık
resim[:,:,1]=255#bütün resimi yesil tonla yapıyor
resim[:,:,2]=255#bütün resimi kırmızı tonla yapıyor
"""
resim[100:200,100:200,0]=255#sadece belli bir bölümü mavi yapıyoruz

cv2.imshow("gösterilecek orjinal resim:",resim)
cv2.imshow("birlestirdigiimiz(mege) edilmiş resim",yeni_resim)

"""

cv2.imshow("gösterilecek blue resim:",b)
cv2.imshow("gösterilecek green resim:",g)
cv2.imshow("gösterilecek red resim:",r)
"""
cv2.waitKey(0)
cv2.destroyAllWindows()

RESİM UzATMA ,AYNALAMA VS
import cv2
import numpy as np
resim=cv2.imread("resim.jpg")

#resmi uzatma
uzatılan_resim=cv2.copyMakeBorder(resim,100,100,100,100,cv2.BORDER_REPLICATE)

#resmiaynalama
aynalanan_resim=cv2.copyMakeBorder(resim,100,100,100,100,cv2.BORDER_REFLECT)
#resmi tekrar etme
tekrareden_resim=cv2.copyMakeBorder(resim,100,100,100,100,cv2.BORDER_WRAP)
#resmin etrafını sarma
sarilan_resim=cv2.copyMakeBorder(resim,100,100,100,100,cv2.BORDER_CONSTANT,value= [255,0,0]) #sondakivalue ile sarilan boşlugu mavi yapabiliyorum

print(resim.shape)  #yükseklik,genişlik,renk sayısı

cv2.imshow("resim",resim)
cv2.imshow("resimuzatma",uzatılan_resim)
cv2.imshow("resimaynalama",aynalanan_resim)
cv2.imshow("resimtekrar",tekrareden_resim)
cv2.imshow("resimsarilan",sarilan_resim)
cv2.waitKey(0)
cv2.destroyAllWindows()

KARE İÇİNE ALMA
import cv2
import numpy as np
resim=cv2.imread("resim.jpg")


cv2.rectangle(resim,(50,200),(150,20),[0,0,255],2) # (işlem yapılan kısmın isimi,(x,y),(x,y),[ne renkle çizilecek],kalınlıgı

cv2.imshow("resim",resim)


cv2.waitKey(0)
cv2.destroyAllWindows()

Çalışmadı bu toplama video izleyip geçtim
import cv2
import numpy as np

def main():
    resim1 =cv2.imread("x.jpg")
    resim2 =cv2.imread("y.jpg")
    bolge1 =resim1[0:100,50:100]
    bolge2 =resim2[0:100,50:100]
    """
    print("on yuz resim degerleri yukseklik:{}, genislik {} ,kanal sayısı:{}".format(resim1.shape[0],resim1.shape[1],resim1.shape[2]))
    print("arka yuz resim degerleri yukseklik:{}, genislik {} ,kanal sayısı:{}".format(resim2.shape[0],resim2.shape[1],resim2.shape[2]))
    """

    print(resim1[100,100]) #resimdeki 1 noktanın adresini görücez ve toplıycaz alttakinin adrrsiyle
    print(resim2[100,100])
    print(resim1[100,100] +resim2[100,100]) #terminalde bu ikisini nasıl topladıgını görebilirsin
    print(cv2.add(bolge1[0,50],bolge2[0,50])) # bu şekilde yaparsak alt alta göstererekmaksimum doyuma ulaştıgında 255 yazıyor
    cv2.imshow("x.jpg",bolge1)
    cv2.imshow("y.jpg",bolge2)
    #toplam =cv2.add(bolge1+bolge2)
    #cv2.imshow("toplam",toplam)


    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
        main()



#resmin belirli bir bölgesine başka bir resim eklemek
#KULLANILABİLİR
a_gri=cv2.cvtColor(dosyaismi,cv2.COLOR_BGR2GRAY) #RESİMİ GREYE DÖNÜŞTÜRÜYOR
YUKSEKLİK,GENİSLİK,KANAL=2.dosyaismi.shape #dosyanın şekil özelligini veriyor
roı=#resimdekiherhangibir bölge demek
öreneğin
ROI=1dosyaisimi[0:yükseklik,0:genislik] şekilinde

ret,mask=cv2.threshold(yerine yerlestirecegimiz dosya isimi,10,255,cv2.THRESH_BINARY) # 10 degerininin üzerini ben 255 yapıyorum burada dk 12.00(2 degişken bu şkilde atanabiliyo)(resimi siyah beyaz yapabiliriz)
mask_inver =cv2.bitwise_not(mask) #resimin tersini almak (bitlerin tersini alıyor)
1.resimim=cv2.bitwise_and(ROI,ROI,mask=mask_inver) # resimi diger resimin üzerine taşıyor
 toplam=cv2.add(feyyazarka,android)# 2 resmi topluyorum siyahlar etkisiz oldugundan yeşil olan kısım gözükecek

feyyaz_yigit[0:yukseklik,0:genislik] toplam #renkli kısmı baska resmin üzerine ekledik

iki_kat=cv2.pyrUp(resim)#resimi 2 katına çıkartıyorum (büyütüyorum)
iki_kat=cv2.pyrDown(resim)#resimin boyutunu  küçültme
resim=np.zeros((400,400,3),dtype="uint8") #400 e400 matrisoluştur her birinde 3 yapıtutuyor en son typ ile 0a 255tam sayı degerlerini tut dedik
np.zeros =tüm degerlere 0 yerleştiriyor belirtilen matriste

# resimüzerine daire çizgi yazı yazma
resim=np.zeros((400,400,3),dtype="uint8") #400 e400 matrisoluştur her birinde 3 yapıtutuyor en son typ ile 0a 255tam sayı degerlerini tut dedik
resim.fill(255) #dk5 resimi full beyaz yapıyor arka planı
cv2.line(resim isimi,(0:0),(200:00),(255,0,0),2) #dk7 başlangıçtan ortaya çizgi çektik
not:orta nokta 400 e 400ise 200e200dür
cv2.circle(resim(200,200),50,(0,255,0)2)# resimin ortasına daire çiziyoruz yarıçapı 50
cv2.putText(resim,"yazilacakyazi",(100,100),cv2.FONT_HERSHEY_PLAIN,2,(0,0,255),2) #yazi yazma

cv2.rectangle(resim,(150,150),(250,150),(150,150,150),2) #daire cizme










Ders10
#kameradan görüntü alma
#kameradan görüntü alma

import cv2
import numpy as np


#0== bilgisayara tanımlı olan kamerayı kullanacak
#1 == usb ye baglı olan kamerayı kullanacak
#VİDEO ADRESİ == kayıtlı videoyu kullanıyor

kamera=cv2.VideoCapture(0)

while True:
    ret,kare =kamera.read()
    print(kare)
    bolge=kare[200:300,200:300] # belli birbölgeyi alıp 2. Ekranda gösterdim
    cv2.rectangle(kare,(100,200),(200,100),(255,255,255),2)  #videonun içinde belirli bir bölgede kare çizme

    cv2.imshow("video",kare)
    cv2.imshow("bolge", bolge)
    if cv2.waitKey(1) & 0xFF == ord('q'):
      break

kamera.relaese()
cv2.destroyAllWindows()

Ders11
#kamera boyutlandırma
kamera.set(3,200)
kamera.set(4,200)

#piksel büyütme
def ayarlama(kare,yuzde=75)
    genislik=int(kare.shape[1]*yuzde/100) #belirtilenin 100 de 75 ini ladık
    yukseklik=int(kare.shape[0]*yuzde/100) #yuksekligide yuzde 75 olarak ayarladı
    boyut=(genislik,yukseklik)
    return cv2.resize(kare,boyut,interpolation=cv2.INTER_AREA)#fonksiyonu kare biçiminde döndürüyor

griton=cv2.cvtColor(kare,cv2.COLOR_BGR2GRAY)#resmi griye döndürüyor







Ders 12
#Python OpenCV - 12 - Video Kaydetme ve Döndürme
#ret =devamlılık parametresi
import cv2
import numpy as np
def main():
    kamera=cv2.VideoCapture(0)

    fourcc= cv2.VideoWriter_fourcc(*"XVID") #format belirleme
    kayit= cv2.VideoWriter("kayit.avi",fourcc,30,(640,480)) #kayıt etme
    while True:
        ret,goruntu=kamera.read()
        ters_goruntu =cv2.flip(goruntu) #goruntuyu ters alma ortaya yazmadım kaydetmesini vs istemedim
        if ret==True:
            kayit.write(goruntu)

        cv2.imshow("goruntu",goruntu)
        cv2.imshow("ters goruntu",ters_goruntu) #görünttününters hali
        if cv2.waitKey(25) & 0xFF == ord('q'):
            break
    kamera.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()

HUE İŞLEMİ KULLANILABİLİR
#Python OpenCV - 13 - Renkleri Ayırt Etmek(Renk Filtreleme) HSV
#ret=true yada false degeri alıyor

import cv2
import numpy as np
kamera =cv2.VideoCapture(0)

dusuk=np.array([90,50,50]) #mavi degerini bulma
yuksek=np.array([130,255,255])


while True:
    ret,goruntu=kamera.read()

    hsv=cv2.cvtColor(goruntu,cv2.COLOR_BGR2HSV) #görüntümüüzü hsv uzayına döndürdük


    cv2.imshow("anagoruntu(BLUE , GREEN RED,",goruntu)
    cv2.imshow("hsv HUE,STRATION,VALUE goruntusu",hsv)

    if cv2.waitKey(25) & 0xFF ==ord ('q'):
        break

kamera.release()
cv2.destroyAllWindows()


KESİN DENE DERS 13 *****
#Python OpenCV - 13 - Renkleri Ayırt Etmek(Renk Filtreleme) HSV
#ret=true yada false degeri alıyor

#mavi filtreleme işlemi yaptık

import cv2
import numpy as np
kamera =cv2.VideoCapture(0)

dusuk=np.array([90,50,50]) #mavi degerini bulma
yuksek=np.array([130,255,255])


while True:
    ret,goruntu=kamera.read()

    hsv=cv2.cvtColor(goruntu,cv2.COLOR_BGR2HSV) #görüntümüüzü hsv uzayına döndürdük

    mask =cv2.inRange(hsv,dusuk,yuksek)

    son_resim = cv2.bitwise_and(goruntu,goruntu, mask=mask)


    cv2.imshow("anagoruntu(BLUE , GREEN RED,",goruntu)
    cv2.imshow("hsv HUE,STRATION,VALUE goruntusu",hsv)
    cv2.imshow("mask",mask)  #cok önemli kullanılabilir burada maviyi esas aldık
    cv2.imshow("renk algılama",son_resim)


    if cv2.waitKey(25) & 0xFF ==ord ('q'):
        break

kamera.release()
cv2.destroyAllWindows()











GÜRÜLTÜ AZALTMA
#ders 13 te alınan görüntünün iyileştirilmesi (blurlama ve yumuşatma(smoothed) işlemi)
#Python OpenCV - 14 - Renk Filtreleme Çeşitleri(Renk Filtreleme) HSV
#ret=true yada false degeri alıyor

#mavi filtreleme işlemi yaptık

import cv2
import numpy as np
kamera =cv2.VideoCapture(0)

dusuk=np.array([20,50,50]) #mavi degerini bulma (bunlar ile oynayarak rengi ayarlamaya çalış)
yuksek=np.array([37,255,255])


while True:
    ret,goruntu=kamera.read()

    hsv=cv2.cvtColor(goruntu,cv2.COLOR_BGR2HSV) #görüntümüüzü hsv uzayına döndürdük

    mask =cv2.inRange(hsv,dusuk,yuksek)

    son_resim = cv2.bitwise_and(goruntu,goruntu, mask=mask)

    #smoothed

    kernel=np.ones((15,15),dtype=np.float32) / 225
    smoothed =cv2.filter2D(son_resim,-1,kernel) # bu kısım genelde sabittir

    #bulurlama

    blur=cv2.GaussianBlur(son_resim,(15,15),0)

    #median (gürültüyü epeyi bir engelliyor)
    median=cv2.medianBlur(son_resim,15)

    #bilateral   ****

    bilateral=cv2.bilateralFilter(son_resim,15,75,75)#bunlar kalıplaşmış kullanımlar

    cv2.imshow("anagoruntu(BLUE , GREEN RED),",goruntu)
    cv2.imshow("hsv HUE,STRATION,VALUE goruntusu",hsv)
    #cv2.imshow("mask",mask)  #cok önemli kullanılabilir burada maviyi esas aldık
    #cv2.imshow("renk algılama",son_resim)
    cv2.imshow("smoothed",smoothed)
    cv2.imshow("blurlanmıs", blur)
    cv2.imshow("median", median)
    cv2.imshow("bilateral", bilateral)

    if cv2.waitKey(25) & 0xFF ==ord ('q'):
        break
print(kernel)
kamera.release()
cv2.destroyAllWindows()
#Python OpenCV - 15 - Morfolojik Filteleme
#mavi filtreleme işlemi yaptık ****

import cv2
import numpy as np
kamera =cv2.VideoCapture(0)

dusuk=np.array([90,50,50]) #mavi degerini bulma
yuksek=np.array([130,255,255])


while True:
    ret,goruntu=kamera.read()

    hsv=cv2.cvtColor(goruntu,cv2.COLOR_BGR2HSV) #görüntümüüzü hsv uzayına döndürdük

    mask =cv2.inRange(hsv,dusuk,yuksek)

    son_resim = cv2.bitwise_and(goruntu,goruntu, mask=mask)

    # ders 15 ********için
    kernel = np.ones((5,5),np.uint8) #5e 5 i arttırdıkçe maskeyi yok ediyor bidigin
    erosion = cv2.erode(mask,kernel,iterations= 1) # siyah alanı silmeye çalışıyor
    diolation = cv2.dilate(mask,kernel,iterations= 1) #beyaz alanı arttırmaya çalışıyor
    opening =cv2.morphologyEx(mask,cv2.MORPH_OPEN,kernel)#yazımızı göstermeye çalışıyor
    closing =cv2.morphologyEx(mask,cv2.MORPH_CLOSE,kernel) #kusur kapatıyorrenk farklarını benzetiyor
    # ders 15 kısım son
    cv2.imshow("mask",mask)  #cok önemli kullanılabilir burada maviyi esas aldık
    cv2.imshow("renk algılama",son_resim)
    cv2.imshow("erosion", erosion)
    cv2.imshow("diolation", diolation)
    cv2.imshow("opening", opening)
    cv2.imshow("closing", closing)


    if cv2.waitKey(25) & 0xFF ==ord ('q'):
        break

kamera.release()
cv2.destroyAllWindows()









#Python OpenCV - 16 - Kamera Üzerinden Nesne Tespiti
import cv2
import numpy as np

kamera=cv2.VideoCapture(0)

while True:
    ret,kare =kamera.read()

    gri_kare=cv2.cvtColor(kare,cv2.COLOR_BGR2GRAY)
    nesne=cv2.imread("kalem.jpg",0)

    w,h=nesne.shape #(w=genişlik,h=yukseklik)

    res=cv2.matchTemplate(gri_kare,nesne,cv2.TM_CCOEFF_NORMED)# karemizde tarama yapıyor
    esig_degeri=0.6 # algılayamazsan eşik degeriyle oyna
    loc = np.where(res>esig_degeri)



    for n in zip(*loc[::-1]):
        cv2.rectangle(kare,n,(n[0]+h,n[1]+w),(0,255,0),2)


    cv2.imshow("ekran",kare)
    if cv2.waitKey(25) & 0xFF == ord('q'):
        break


kamera.release()
cv2.destroyAllWindows()














#Python OpenCV - 16 - Kamera Üzerinden Nesne Tespiti yazida yazdık yanına
import cv2
import numpy as np

kamera=cv2.VideoCapture(0)

while True:
    ret,kare =kamera.read()

    gri_kare=cv2.cvtColor(kare,cv2.COLOR_BGR2GRAY)
    nesne=cv2.imread("kalem.jpg",0)

    w,h=nesne.shape #(w=genişlik,h=yukseklik)

    res=cv2.matchTemplate(gri_kare,nesne,cv2.TM_CCOEFF_NORMED)# karemizde tarama yapıyor
    esig_degeri=0.5 # algılayamazsan eşik degeriyle oyna
    loc = np.where(res>esig_degeri)



    for n in zip(*loc[::-1]):
        cv2.rectangle(kare,n,(n[0]+h,n[1]+w),(0,255,0),2)
        cv2.putText(kare,"yakisikli",(n[0]+10,n[1]+10),cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),1) #yazi yazabiliyoruz algıladıgı yere


    cv2.imshow("ekran",kare)
    if cv2.waitKey(25) & 0xFF == ord('q'):
        break


kamera.release()
cv2.destroyAllWindows()














# çizigi fltreleri

import cv2
import numpy as np
resim=cv2.imread("resim.jpg")


#laplacian çizgileri siyah beyaz şekilde ayırabiliyoruz
laplacian =cv2.Laplacian(resim,cv2.CV_64F)

#sobel=dikey

sobel_dikey=cv2.Sobel(resim,cv2.CV_64F,1,0,ksize=5)

#sobel=yatay
sobel_dikey=cv2.Sobel(resim,cv2.CV_64F,0,1,ksize=5)

#canny
kenarlar=cv2.Canny(resim,50,200)

cv2.imshow("orjinal resim",resim)
cv2.imshow("laplacian",laplacian)
cv2.imshow("sobel",sobel_dikey)
cv2.imshow("canny",kenarlar)

cv2.waitKey(0)
cv2.destroyAllWindows()



#köşe bulma işlemi

import cv2
import numpy as np

def main():
    resim=cv2.imread("kose.jpg")
    resim_gri = cv2.cvtColor(resim,cv2.COLOR_BGR2GRAY)
    resim_gri = np.float32(resim_gri)

    koseler = cv2.goodFeaturesToTrack(resim_gri,50,0.01,10)

    koseler = np.int0(koseler)

    for kose in koseler:
        x,y=kose.ravel()
        cv2.circle(resim,(x,y),3,(255,0,0),-1)

    cv2.imshow("resim",resim)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__== " __main__":
    main()

#köşe bulma işlemi  çalışmadı!!!!

#köşe bulma işlemi

import cv2
import numpy as np


resim = cv2.imread("kose.jpg")
resim_gri = cv2.cvtColor(resim,cv2.COLOR_BGR2GRAY)
resim_gri = np.float32(resim_gri)

koseler = cv2.goodFeaturesToTrack(resim_gri,50,0.01,5)

koseler = np.int0(koseler) # int e dönüştürdük

for kose in koseler:
    x,y  = kose.ravel()
    cv2.circle(resim,(x,y),3,(255,0,0),-1)

cv2.imshow("resim",resim)
cv2.waitKey(0)
cv2.destroyAllWindows()


#Python OpenCV - 20 - Haarcascade İnsan Yüz ve Göz Filtreleme

import cv2
import numpy as np

kamera=cv2.VideoCapture(0)
while True:
    ret,kare=kamera.read()



    yuz_casc=cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
    # resim=cv2.imread("yuz.jpg")
    gri_ton =cv2.cvtColor(kare,cv2.COLOR_BGR2GRAY)
    yuzler=yuz_casc.detectMultiScale(gri_ton,1.1,4)

    print(yuzler)
    for (x,y,w,h) in yuzler:
        cv2.rectangle(kare,(x,y),(x+w,y+h),(255,0,0),2)

    cv2.imshow("resim",kare)

    if cv2.waitKey(25) & 0xFF == ord('q'):
        break

cv2.waitKey(0)
cv2.destroyAllWindows()



-------------------------------------------------------------------------------------------------------------------------------------
EKKKKK
(ekran görüntüsü alma)
import cv2
import numpy as np
from PIL import ImageGrab
import time

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür
    cv2.imshow("Ekran_goruntusu",cv2.cvtColor(Ekran_Görüntüsü,cv2.COLOR_BGR2RGB))#BURADA BGR DEN RGB YE DÖNDÜRDÜK

    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break
+
+
SİYAH BEYAZ MASKELEME İŞLEMİ
import cv2
import numpy as np
from PIL import ImageGrab
import time

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür

    Alt_degerler =np.array([230,230,230])# yansmmayıengelleyecek kadarbeyaz degerler
    ust_degerler =np.array([255,255,255])#beyaz renk bu

    Renk_filtresi_sonuc=cv2.inRange(Ekran_Görüntüsü,Alt_degerler,ust_degerler)#alt deger ve üst degerler arasında resimisınırlandırıyor.


    cv2.imshow("ekran",cv2.cvtColor(Renk_filtresi_sonuc,cv2.COLOR_BGR2RGB))#BURADA BGR DEN RGB YE DÖNDÜRDÜK

    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break
+
+


Siyah beyaz üzerinden renkortalamasını  gösterdim geri ykalan yerlerde bunu dönüştürmeden yaptığım yerde göstericem
import cv2
import numpy as np
from PIL import ImageGrab
import time

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür

    Alt_degerler =np.array([230,230,230])# yansmmayıengelleyecek kadarbeyaz degerler
    ust_degerler =np.array([255,255,255])#beyaz renk bu

    Renk_filtresi_sonuc=cv2.inRange(Ekran_Görüntüsü,Alt_degerler,ust_degerler)#alt deger ve üst degerler arasında resimisınırlandırıyor.

    ortalama_x = 0 #beyaz ortalaması x teki
    ortalama_y = 0 #beyaz ortalaması y deki
    ortalama_t = 0#beyazları gördüğümüzde ortalamaya dahil edicez if içine girince t yi arttırıcaz


    for x in range(Renk_filtresi_sonuc.shape[1]): # X=1 Y=0OLUYOR TÜMEKRANI ALIRKEN
        for y in range(Renk_filtresi_sonuc.shape[0]):
            if(Renk_filtresi_sonuc[y,x] ==255): #EGER BEYAZ EKRAN İSE DEDİK
                ortalama_x += x
                ortalama_y += y
                ortalama_t += 1

    ortalama_x /= ortalama_t #bunlar float
    ortalama_y /= ortalama_t #burası float

    ortalama_x = int(ortalama_x)
    ortalama_y = int(ortalama_y)

    cv2.circle(Renk_filtresi_sonuc,(ortalama_x,ortalama_y),7,(0,0,255),-1) #-1kalınlık amaçlı #burada kıısımlar intisteniyor!!!#ortasına nokta koyuyoruz



    cv2.imshow("ekran",cv2.cvtColor(Renk_filtresi_sonuc,cv2.COLOR_BGR2RGB))#BURADA BGR DEN RGB YE DÖNDÜRDÜK

    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break
+
+


Renkliekranda siyah beyazın ortalaması gösterimi
import cv2
import numpy as np
from PIL import ImageGrab
import time

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür

    Alt_degerler =np.array([230,230,230])# yansmmayıengelleyecek kadarbeyaz degerler
    ust_degerler =np.array([255,255,255])#beyaz renk bu

    Renk_filtresi_sonuc=cv2.inRange(Ekran_Görüntüsü,Alt_degerler,ust_degerler)#alt deger ve üst degerler arasında resimisınırlandırıyor.

    ortalama_x = 0 #beyaz ortalaması x teki
    ortalama_y = 0 #beyaz ortalaması y deki
    ortalama_t = 0#beyazları gördüğümüzde ortalamaya dahil edicez if içine girince t yi arttırıcaz


    for x in range(Renk_filtresi_sonuc.shape[1]): # X=1 Y=0OLUYOR TÜMEKRANI ALIRKEN
        for y in range(Renk_filtresi_sonuc.shape[0]):
            if(Renk_filtresi_sonuc[y,x] ==255): #EGER BEYAZ EKRAN İSE DEDİK
                ortalama_x += x
                ortalama_y += y
                ortalama_t += 1

    ortalama_x /= ortalama_t #bunlar float
    ortalama_y /= ortalama_t #burası float

    ortalama_x = int(ortalama_x)
    ortalama_y = int(ortalama_y)

    cv2.circle(Ekran_Görüntüsü,(ortalama_x,ortalama_y),7,(0,0,255),-1) #-1kalınlık amaçlı #burada kıısımlar intisteniyor!!!#ortasına nokta koyuyoruz



    cv2.imshow("ekran",Ekran_Görüntüsü)#BURADA BGR DEN RGB YE DÖNDÜRDÜK

    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break
+
+

BURADA KIRMIZI NOKTA İLE YATAY BİLEŞENDE BEYAZIN AĞIRLIKTA OLDUĞU KISIMA GİDEBİLİYOR.BUNA GÖREDE ALTTAKİNDEN SONRA SAĞA MI SOLA MI GİTMEMİZGEREKTİĞİNİ ANLIYCAZ.
import cv2
import numpy as np
from PIL import ImageGrab
import time

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür
#EKRAN
 #EKRAN SON İŞLEMLERDEN SONRA YAVAŞLAMA BAŞLADI BUNU AZLATMAK İÇİN EKRANI BOYUTLANDIRIICAZ ORAN HESABIYAPARAK
    r = 300.0 / Ekran_Görüntüsü.shape[1]   #300=genişliğiifade ediyor
    dim = (300,int(Ekran_Görüntüsü.shape[0]*r))
    Ekran_Görüntüsü = cv2.resize(Ekran_Görüntüsü, dim , interpolation=cv2.INTER_AREA)

    Alt_degerler =np.array([230,230,230])# yansmmayıengelleyecek kadarbeyaz degerler
    ust_degerler =np.array([255,255,255])#beyaz renk bu

    Renk_filtresi_sonuc=cv2.inRange(Ekran_Görüntüsü,Alt_degerler,ust_degerler)#alt deger ve üst degerler arasında resimisınırlandırıyor.

    ortalama_x = 0 #beyaz ortalaması x teki
    ortalama_y = 0 #beyaz ortalaması y deki
    ortalama_t = 0#beyazları gördüğümüzde ortalamaya dahil edicez if içine girince t yi arttırıcaz


    for x in range(Renk_filtresi_sonuc.shape[1]): # X=1 Y=0OLUYOR TÜMEKRANI ALIRKEN
        for y in range(Renk_filtresi_sonuc.shape[0]):
            if(Renk_filtresi_sonuc[y,x] ==255): #EGER BEYAZ EKRAN İSE DEDİK
                ortalama_x += x
                ortalama_y += y
                ortalama_t += 1

    ortalama_x /= ortalama_t #bunlar float
    ortalama_y /= ortalama_t #burası float

    ortalama_x = int(ortalama_x)
    ortalama_y = int(ortalama_y)

    cv2.circle(Ekran_Görüntüsü,(ortalama_x,ortalama_y),7,(0,0,255),-1) #-1kalınlık amaçlı #burada kıısımlar intisteniyor!!!#ortasına nokta koyuyoruz



    cv2.imshow("ekran",Ekran_Görüntüsü)#BURADA BGR DEN RGB YE DÖNDÜRDÜK

    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break
import cv2    #BURADA ORYA NOKTAYI BULDU BEYAZ AĞIRLIKLI YER İLE ALTTAKİNDEN SONRA KIYASLAMATA BAŞLIYCAZ
import numpy as np
from PIL import ImageGrab
import time

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür
#EKRAN
 #EKRAN SON İŞLEMLERDEN SONRA YAVAŞLAMA BAŞLADI BUNU AZLATMAK İÇİN EKRANI BOYUTLANDIRIICAZ ORAN HESABIYAPARAK
    r = 300.0 / Ekran_Görüntüsü.shape[1]   #300=genişliğii fade ediyor
    dim = (300,int(Ekran_Görüntüsü.shape[0]*r))
    Ekran_Görüntüsü = cv2.resize(Ekran_Görüntüsü, dim , interpolation=cv2.INTER_AREA)

#MERKEZ NOKTAYI BULABİLNMEK  İÇİN HESAPLATIYORUZ
    merkez_x = Ekran_Görüntüsü.shape[1]/2 # X İÇİN
    merkez_x =int(merkez_x)
    merkez_y = Ekran_Görüntüsü.shape[0] / 2 #  Y İÇİN
    merkez_y = int(merkez_y)

    Alt_degerler =np.array([230,230,230])# yansmmayıengelleyecek kadarbeyaz degerler
    ust_degerler =np.array([255,255,255])#beyaz renk bu

    Renk_filtresi_sonuc=cv2.inRange(Ekran_Görüntüsü,Alt_degerler,ust_degerler)#alt deger ve üst degerler arasında resimisınırlandırıyor.

    ortalama_x = 0 #beyaz ortalaması x teki
    ortalama_y = 0 #beyaz ortalaması y deki
    ortalama_t = 0#beyazları gördüğümüzde ortalamaya dahil edicez if içine girince t yi arttırıcaz

    for x in range(Renk_filtresi_sonuc.shape[1]): # X=1 Y=0OLUYOR TÜMEKRANI ALIRKEN
        for y in range(Renk_filtresi_sonuc.shape[0]):
            if(Renk_filtresi_sonuc[y,x] ==255): #EGER BEYAZ EKRAN İSE DEDİK
                ortalama_x += x
                ortalama_y += y
                ortalama_t += 1

    ortalama_x /= ortalama_t #bunlar float
    ortalama_y /= ortalama_t #burası float

    ortalama_x = int(ortalama_x)
    ortalama_y = int(ortalama_y)

    cv2.circle(Ekran_Görüntüsü,(ortalama_x,ortalama_y),5,(0,0,255),-1) #-1kalınlık amaçlı #burada kıısımlar intisteniyor!!!#ortasına nokta koyuyoruz
    cv2.circle(Ekran_Görüntüsü,(merkez_x,merkez_y),5,(255,0,0),-1 )

    cv2.imshow("ekran",Ekran_Görüntüsü)#BURADA BGR DEN RGB YE DÖNDÜRDÜK
    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break
import cv2              #YOL TAKİP SONNNNNNNNNN
import numpy as np
from PIL import ImageGrab
import time
from directkeys import ReleaseKey, PressKey, W, A, S, D # kütüphaneyi aynı dosya içerisinde yenipydosyası oluştırarak ekleyebilirsin !!!

while(True): #sonsuz döngüde ekran görüntüsü gri olur.
    PressKey(W)
    Ekran_Görüntüsü = np.array(ImageGrab.grab(bbox=(0,40,760,640))) #sol üstteki nokta,sağ üstekinoktanın kordinatları,,grab=kapmak,,np.aray=resim olarak alğılamasını sağlıyor  #ekran görüntüsünü alıyo,,Burada BGR uzayında oluyor bunu rgb ye dönüştürürsem  asıl renginde gözükür
#EKRAN
 #EKRAN SON İŞLEMLERDEN SONRA YAVAŞLAMA BAŞLADI BUNU AZLATMAK İÇİN EKRANI BOYUTLANDIRIICAZ ORAN HESABIYAPARAK
    r = 300.0 / Ekran_Görüntüsü.shape[1]   #300=genişliğii fade ediyor
    dim = (300,int(Ekran_Görüntüsü.shape[0]*r))
    Ekran_Görüntüsü = cv2.resize(Ekran_Görüntüsü, dim , interpolation=cv2.INTER_AREA)

#MERKEZ NOKTAYI BULABİLNMEK  İÇİN HESAPLATIYORUZ
    merkez_x = Ekran_Görüntüsü.shape[1]/2 # X İÇİN
    merkez_x =int(merkez_x)
    merkez_y = Ekran_Görüntüsü.shape[0] / 2 #  Y İÇİN
    merkez_y = int(merkez_y)


    Alt_degerler =np.array([230,230,230])# yansmmayıengelleyecek kadarbeyaz degerler
    ust_degerler =np.array([255,255,255])#beyaz renk bu

    Renk_filtresi_sonuc=cv2.inRange(Ekran_Görüntüsü,Alt_degerler,ust_degerler)#alt deger ve üst degerler arasında resimisınırlandırıyor.

    ortalama_x = 0 #beyaz ortalaması x teki
    ortalama_y = 0 #beyaz ortalaması y deki
    ortalama_t = 0#beyazları gördüğümüzde ortalamaya dahil edicez if içine girince t yi arttırıcaz


    for x in range(Renk_filtresi_sonuc.shape[1]): # X=1 Y=0 OLUYOR TÜM EKRANI ALIRKEN
        for y in range(Renk_filtresi_sonuc.shape[0]):
            if(Renk_filtresi_sonuc[y,x] ==255): #EGER BEYAZ EKRAN İSE DEDİK
                ortalama_x += x
                ortalama_y += y
                ortalama_t += 1
    if(ortalama_t>0): #ortamda beyaz olmazssa ne yapıcağına burada karar verdik ona göre şart koydum
        ortalama_x /= ortalama_t #bunlar float
        ortalama_y /= ortalama_t #burası float
        ortalama_x = int(ortalama_x)
        ortalama_y = int(ortalama_y)

# BU KISIMDA ARACI YÖNLENDİRİYORUZ YÖNLENDİRME MANTIGI SAGA GİDİNCE SOLA SOLA GİDİNCE ARACI SAĞA ÇEKİYOR
        x_fark = merkez_x - ortalama_y
        if(x_fark >=5 ):
            print("A")
            PressKey(A) #harfe basıyoruz klavyeden
        elif(x_fark<=-5):
            print("D") #ekrana yaz dedikneyi bastığını
            PressKey(D) #harfe basıyoruz klavyeden
        else:
            ReleaseKey (A)# harfe basmayıbırakıyor
            ReleaseKey (D)#harfe basmayıbırakıyor


        cv2.circle(Ekran_Görüntüsü,(ortalama_x,ortalama_y),5,(0,0,255),-1) #-1kalınlık amaçlı #burada kıısımlar intisteniyor!!!#ortasına nokta koyuyoruz buraso hep intistiyor muş
        cv2.circle(Ekran_Görüntüsü,(merkez_x,merkez_y),5,(255,0,0),-1 )



        cv2.imshow("ekran",Ekran_Görüntüsü)#BURADA BGR DEN RGB YE DÖNDÜRDÜK

    if cv2.waitKey(25) & 0xFF ==ord('q'): #siyah beyaz göstermemesiiçin bu lazım
        cv2.destroyAllWindows()
        break

--------------------------------------------------------------------------------------------------------------------------------------

